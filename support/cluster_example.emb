#пример ввода для построения кластера. Комментарии начинаются с символа '#'
#запуск скрипта для генерации: python <путь к скрипту> <имя данного файла>
#в рабочей директории должны находиться ввод и вывод CRYSTAL с названиями <...>.d12 и <...>.out
#для вывода отладочной информации можно добавить ключ -v или -vv
#данный файл может называться как угодно, но у него должно быть расширение
#кластер будет создан в директории с именем данного файла без расширения

#==============ОБЯЗАТЕЛЬНЫЕ ПАРАМЕТРЫ============

center 9 Ca
#номер центрального атома в транслируемой ячейке и его тип

inner_shells 1		
#число полностью учтенных оболочек

electro_shells 1	
#число чисто электростатических оболочек
#общее число оболочек равно (inner_shells + electro_shells + 1)


#==========ОПЦИОНАЛЬНЫЕ ПАРАМЕТРЫ===========

charge_method redox
#Метод определения эффективных зарядов атомов:
#mulliken - заряды по малликену, должны быть в расчёте по умолчанию
#bader - бейдеровские заряды из файла ACF.dat (в ACF.dat необходимо вручную усреднить заряды эквивалентных атомов, иначе будет ошибка при оптимизации)
#redox - степени окисления; рассчитываются автоматически, можно переопределить через override_charge

override_valence Ca 2
#переопределение числа "валентных" электронов для атомов одного типа
#по умолчанию валентность рассчитывается на основании заселённостей атомных оболочек
#для f-элементов валентность по умолчанию точно неправильная
#валентность используется для поиска частичных зарядов на граничных атомах
#в потенциалах для граничных атомах все электроны, кроме валентных должны быть в остове

override_charge Ca 2
#переопределение заряда (степени окисления) для атомов одного типа
#по умолчанию заряд рассчитывается для катионов также как валентность, а для анионов - (валентность - 8)
#заряд используется для нахождения числа дополнительных электронов на центральном кластере

override_bond Ca-O 2.8
#переопределение максимальной длины связи; используется для поиска соседних атомов
#по умолчанию используется алгоритм на основе атомных радиусов
#переопределение не гарантирует учёт атомов как соседних, если они не удовлетворяют угловым условиям

expand_covalent
#при наличии этого слова центральный кластер будет расширен при наличии ковалентных связей "наружу"
#ковалентными считаются связи между двумя неметаллами, напр. P-O
#расширение происходит итеративно, пока полученный кластер не будет иметь ковалентных связей "наружу"
#если за пять итераций расширение не остановилось, будет ошибка

add_center Ca 2 3.66084
add_center Ca 2 3.66084
#добавление дополнительных центров
#указывается тип, номер оболочки от основного центра и расстояние до основного центра
#возможно добавление нескольких дополнительных центров

#==========ОПЦИОНАЛЬНЫЕ ПАРАМЕТРЫ ДЛЯ ГЕНЕРАЦИИ TUROBOMOLE-ВВОДА===========

make_turbo
#при наличии этого слова будет создан ввод для TURBOMOLE
#control, coord, coord_ca, embedding и embedding.start для оптимизации зарядов
#возможно, для открытых оболочек control будет некорректным
#необходим запуск define для генерации системных параметров $rundimensions

embedding Ca Ca 20
embedding Nb Ne 10
#в файле embedding атомы первого типа будут заменены на второй тип с указанным числом остовных электронов
#необходимо для всех типов граничных атомов

ecp_full Ca gatchina_1e
ecp_full Nb gatchina
basis_full Ca crystal1
basis_full Nb crystal2
basis_full O crystall
#названия базисов и псевдопотенциалов для атомов центрального кластера
#сами базисы и пп надо добавлять к расчету отдельно

ecp_border Ca gatchina_2e
ecp_border Nb nb_gatchina_5e
basis_border Ca crystal2
basis_border Nb crystal2
#названия базисов и псевдопотенциалов для граничных атомов










